<div id="editor"></div>

<style>
    .ql-editor {
        display: grid;
        padding: 48px 16px;
        place-items: center;
    }

    .ql-editor > * {
        cursor: text;
    }

    .ql-editor p,
    .ql-editor ol,
    .ql-editor ul,
    .ql-editor pre,
    .ql-editor blockquote,
    .ql-editor h1,
    .ql-editor h2,
    .ql-editor h3,
    .ql-editor h4,
    .ql-editor h5,
    .ql-editor h6 {
        width: 100%;
        max-width: 840px;
        padding: 0 16px;
        margin-left: 0;
        margin-right: 0;
        position: relative;
        text-wrap: pretty;
        box-sizing: border-box;
    }

    .ql-editor li {
        margin-left: 32px;
        margin-bottom: 16px;
        padding-left: 0;
    }

    .ql-editor ul {
        margin-bottom: 32px;
        list-style-type: disc;
    }

    .ql-editor ol {
        margin-bottom: 32px;
        list-style-type: decimal;
    }

    .ql-editor blockquote {
        padding: 4px 16px !important;
        border-left: 3px solid var(--sl-color-neutral-700) !important;
        margin-bottom: 24px !important;
    }

    .ql-editor p,
    pre {
        margin-bottom: 24px !important;
    }

    .ql-editor p,
    ol,
    pre,
    li,
    blockquote {
        font-family: var(--plain-font);
        font-size: var(--sl-font-size-large);
    }

    .ql-editor h1,
    h2 {
        font-family: var(--title-font), 'Times New Roman', Times, serif;
        font-size: var(--sl-font-size-3x-large);
        font-weight: 500;
        line-height: 1.25;
        letter-spacing: 0;
        margin-bottom: 32px;
    }

    .ql-editor h3,
    h4,
    h5 {
        font-weight: 700;
        line-height: 1.25;
        letter-spacing: 0;
        font-family: var(--plain-font);
        font-size: var(--sl-font-size-x-large) !important;
        margin-bottom: 0.5em;
    }

    .ql-editor *[ql-v-visible]::after {
        content: attr(ql-v-text);
        position: absolute;
        z-index: -1;
        transform: translateY(-100%);
        color: #ccc;
    }

    .ql-editor:focus-within h1::before,
    .ql-editor:focus-within h2::before {
        position: absolute;
        padding: 1em 0.5em 0 0.5em;
        left: 0;
        content: 'Title';
        transform: translate(-100%, -0.5em);
        font-size: var(--sl-font-size-small);
        font-family: var(--sl-font-sans);
        height: 100%;
        font-weight: normal;
        color: #ccc;
        border-right: 1px solid #ccc;
    }
</style>

<script defer>
    const Parchment = Quill.import('parchment');
    const Delta = Quill.import('delta');

    const Clipboard = Quill.import('modules/clipboard');
    class FixedClipboard extends Clipboard {
        constructor(...args) {
            super(...args);
        }

        onPaste(e) {
            const range = this.quill.getSelection(true);

            // Get the formatting of the line in the current position to apply it to the first pasted line
            const formats = range ? this.quill.getFormat(range.index) : null;

            // Remove the remaining content of the current line starting from the cursor position
            const [line, offset] = this.quill.getLine(range.index);
            const delta = new Delta()
                .retain(range.index)
                .delete(line.length() - range.index);
            this.quill.updateContents(delta, Quill.sources.SILENT);

            // Perform the default paste behavior (inserts the clipboard contents)
            super.onPaste(e);

            if (formats) {
                // Use a macrotask to ensure this runs after the default paste handling completes
                setTimeout(() => {
                    // Reapply the original formats to the newly inserted first line
                    // NOTE: This could potentially be optimized with a Delta, but works fine for now
                    Object.entries(formats).forEach(([name, value]) => {
                        this.quill.formatLine(range.index, name, value);
                    });
                }, 1);
            }
        }
    }
    Quill.register('modules/clipboard', FixedClipboard);

    function PlaceholderDecorator(blot) {
        return class PlaceholderHelper extends blot {
            static withPlaceholder = true;
            static defaultPlaceholder = 'My placeholder';

            constructor(...args) {
                super(...args);
            }

            static create(input) {
                const isValueHolder =
                    input instanceof Object && 'value' in input;
                const value = isValueHolder ? input.value : input;

                const withPlaceholder =
                    input instanceof Object && 'placeholder' in input;
                const placeholder = withPlaceholder
                    ? input.placeholder
                    : this.defaultPlaceholder;

                const node = super.create(value);
                node.setAttribute('ql-v-text', placeholder);
                node.setAttribute('ql-v-visible', !node.textContent.length);
                return node;
            }

            handlePlaceholder(node) {
                const isVirtualVisible =
                    this.domNode.getAttribute('ql-v-visible');
                const isCurrentEmpty = this.domNode.textContent.length === 0;
                if (isVirtualVisible === isCurrentEmpty) {
                    return;
                }

                if (isCurrentEmpty) {
                    this.domNode.setAttribute('ql-v-visible', true);
                } else {
                    this.domNode.removeAttribute('ql-v-visible');
                }
            }
        };
    }

    function OneInstanceDecorator(blot, alternativeBlot) {
        return class OneInstanceHelper extends blot {
            static oneInstance = true;
            static instance = null;
            static blotName = null;

            constructor(node, value) {
                super(node, value);

                if (!OneInstanceHelper.instance) {
                    OneInstanceHelper.instance = node;
                }
            }

            static create(value) {
                if (OneInstanceHelper.instance) {
                    return alternativeBlot.create(value);
                }

                return super.create(value);
            }

            static formats(domNode) {
                if (OneInstanceHelper.instance) {
                    return alternativeBlot.formats(domNode);
                }
                return super.formats(domNode);
            }

            clone() {
                const blot = super.clone();
                if (OneInstanceHelper.instance) {
                    blot.replaceWith(alternativeBlot.blotName);
                }
                return blot;
            }

            remove() {
                if (OneInstanceHelper.instance === this.domNode) {
                    OneInstanceHelper.instance = null;
                }
                return super.remove();
            }
        };
    }

    const Header = Quill.import('formats/header');
    const Block = Quill.import('blots/block');
    class PostTitle extends OneInstanceDecorator(
        PlaceholderDecorator(Header),
        Header,
    ) {
        static blotName = 'postTitle';

        static create(...args) {
            const node = super.create(...args);
            node.setAttribute('data-title', true);
            return node;
        }

        constructor(node, ...args) {
            super(node, ...args);
        }
    }

    Quill.register('formats/postTitle', PostTitle);
    const toolbarRoot = document.createElement('div');
    toolbarRoot.id = 'toolbar';
    toolbarRoot.className = 'ql-toolbar';
    toolbarRoot.innerHTML = `
        <span class="ql-formats">
            <button type="button" class="ql-bold"></button>
            <button type="button" class="ql-italic"></button>
            <button type="button" class="ql-link"></button>
        </span>
        <span class="ql-formats">
            <button type="button" class="ql-header" value="1"></button>
            <button type="button" class="ql-header" value="2"></button>
            <button type="button" class="ql-blockquote"></button>
        </span>
    `;

    const quill = new Quill('#editor', {
        theme: 'bubble',
        modules: { toolbar: { containter: toolbarRoot } },
    });

    quill.setContents([
        {
            insert: '\n',
            attributes: {
                postTitle: { placeholder: 'Tell your story' },
            },
        },
        {
            insert: '\n',
            attributes: {},
        },
    ]);

    quill.on('text-change', function (delta, oldContents, source) {
        let index = quill.getSelection()?.index;
        if (typeof index !== 'number') {
            return;
        }

        const [line] = quill.getLine(index);
        if ('handlePlaceholder' in line) {
            line.handlePlaceholder();
        }
    });

    function insertNewLineAndToggleFormats(range, oldFormats, newFormats) {
        const [line, offset] = quill.getLine(range.index);
        const delta = new Delta()
            .retain(range.index)
            .insert('\n', oldFormats)
            .retain(line.length() - offset - 1)
            .retain(1, newFormats);
        quill.updateContents(delta, Quill.sources.USER);
        quill.setSelection(range.index + 1, Quill.sources.SILENT);
        quill.scrollIntoView();
    }

    quill.keyboard.bindings[13].unshift({
        key: 'Enter',
        collapsed: true,
        format: ['postTitle', 'header', 'blockquote'],
        handler: function (range, context) {
            insertNewLineAndToggleFormats(range, context.format, {
                postTitle: null,
                header: null,
                blockquote: null,
            });
        },
    });
</script>

<script>
    const parchment = Quill.import('parchment');

    class Image extends parchment.Block {
        static blotName = 'image';
        static tagName = 'FIGURE';

        static create(value) {
            const node = super.create(value);
            const img = document.createElement('img');
            img.setAttribute('loading', 'lazy');

            if (typeof value === 'string') {
                img.setAttribute('src', this.sanitize(value));
            }

            node.appendChild(img);
            return node;
        }

        static formats(domNode) {
            return ATTRIBUTES.reduce((formats, attribute) => {
                if (domNode.hasAttribute(attribute)) {
                    formats[attribute] = domNode.getAttribute(attribute);
                }
                return formats;
            }, {});
        }

        static match(url) {
            return (
                /\.(jpe?g|gif|png)$/.test(url) ||
                /^data:image\/.+;base64/.test(url)
            );
        }

        static sanitize(url) {
            return sanitize(url, ['http', 'https', 'data']) ? url : '//:0';
        }

        static value(domNode) {
            return domNode.getAttribute('src');
        }

        constructor(...args) {
            super(...args);
        }

        format(name, value) {
            if (ATTRIBUTES.indexOf(name) > -1) {
                if (value) {
                    this.domNode.setAttribute(name, value);
                } else {
                    this.domNode.removeAttribute(name);
                }
            } else {
                super.format(name, value);
            }
        }
    }

    Quill.register('formats/image', Image);
</script>
