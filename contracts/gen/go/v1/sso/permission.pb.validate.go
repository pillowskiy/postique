// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/sso/permission.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on HasPermissionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HasPermissionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HasPermissionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HasPermissionRequestMultiError, or nil if none found.
func (m *HasPermissionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *HasPermissionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return HasPermissionRequestMultiError(errors)
	}

	return nil
}

// HasPermissionRequestMultiError is an error wrapping multiple validation
// errors returned by HasPermissionRequest.ValidateAll() if the designated
// constraints aren't met.
type HasPermissionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HasPermissionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HasPermissionRequestMultiError) AllErrors() []error { return m }

// HasPermissionRequestValidationError is the validation error returned by
// HasPermissionRequest.Validate if the designated constraints aren't met.
type HasPermissionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HasPermissionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HasPermissionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HasPermissionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HasPermissionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HasPermissionRequestValidationError) ErrorName() string {
	return "HasPermissionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e HasPermissionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHasPermissionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HasPermissionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HasPermissionRequestValidationError{}

// Validate checks the field values on HasPermissionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HasPermissionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HasPermissionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HasPermissionResponseMultiError, or nil if none found.
func (m *HasPermissionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *HasPermissionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for HasPermission

	if len(errors) > 0 {
		return HasPermissionResponseMultiError(errors)
	}

	return nil
}

// HasPermissionResponseMultiError is an error wrapping multiple validation
// errors returned by HasPermissionResponse.ValidateAll() if the designated
// constraints aren't met.
type HasPermissionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HasPermissionResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HasPermissionResponseMultiError) AllErrors() []error { return m }

// HasPermissionResponseValidationError is the validation error returned by
// HasPermissionResponse.Validate if the designated constraints aren't met.
type HasPermissionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HasPermissionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HasPermissionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HasPermissionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HasPermissionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HasPermissionResponseValidationError) ErrorName() string {
	return "HasPermissionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e HasPermissionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHasPermissionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HasPermissionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HasPermissionResponseValidationError{}

// Validate checks the field values on HasUserPermissionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HasUserPermissionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HasUserPermissionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HasUserPermissionRequestMultiError, or nil if none found.
func (m *HasUserPermissionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *HasUserPermissionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Name

	if len(errors) > 0 {
		return HasUserPermissionRequestMultiError(errors)
	}

	return nil
}

// HasUserPermissionRequestMultiError is an error wrapping multiple validation
// errors returned by HasUserPermissionRequest.ValidateAll() if the designated
// constraints aren't met.
type HasUserPermissionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HasUserPermissionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HasUserPermissionRequestMultiError) AllErrors() []error { return m }

// HasUserPermissionRequestValidationError is the validation error returned by
// HasUserPermissionRequest.Validate if the designated constraints aren't met.
type HasUserPermissionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HasUserPermissionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HasUserPermissionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HasUserPermissionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HasUserPermissionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HasUserPermissionRequestValidationError) ErrorName() string {
	return "HasUserPermissionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e HasUserPermissionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHasUserPermissionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HasUserPermissionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HasUserPermissionRequestValidationError{}

// Validate checks the field values on HasUserPermissionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HasUserPermissionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HasUserPermissionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HasUserPermissionResponseMultiError, or nil if none found.
func (m *HasUserPermissionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *HasUserPermissionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for HasPermission

	if len(errors) > 0 {
		return HasUserPermissionResponseMultiError(errors)
	}

	return nil
}

// HasUserPermissionResponseMultiError is an error wrapping multiple validation
// errors returned by HasUserPermissionResponse.ValidateAll() if the
// designated constraints aren't met.
type HasUserPermissionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HasUserPermissionResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HasUserPermissionResponseMultiError) AllErrors() []error { return m }

// HasUserPermissionResponseValidationError is the validation error returned by
// HasUserPermissionResponse.Validate if the designated constraints aren't met.
type HasUserPermissionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HasUserPermissionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HasUserPermissionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HasUserPermissionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HasUserPermissionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HasUserPermissionResponseValidationError) ErrorName() string {
	return "HasUserPermissionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e HasUserPermissionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHasUserPermissionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HasUserPermissionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HasUserPermissionResponseValidationError{}
